WHAT ARE BUILT-IN OBJECTS?
    Browsers come with a set of built-in objects that
    represent things like the browser window and the
    current web page shown in that window. These
    built-in objects act like a toolkit for creating
    interactive web pages.
    The objects you create will usually be specifically written to suit your
    needs. They model the data used within, or contain functionality needed
    by, your script. Whereas, the built-in objects contain functionality
    commonly needed by many scripts.
    As soon as a web page has loaded into the browser, these objects are
    available to use in your scripts.
    These built-in objects help you get a wide range of information such as
    the width of the browser window, the content of the main heading in the
    page, or the length of text a user entered into a form field.
    You access their properties or methods using dot notation, just like you
    would access the properties or methods of an object you had written
    yourself.
    The first thing you need to do is get to know what
    tools are available. You can imagine that your new
    toolkit has three compartments:
    WHAT DOES THIS SECTION COVER?
    You have already seen how to access the properties and methods of an
    object, so the purpose of this section is to let you know:
    What built-in objects are available to you
    What their main properties and methods do
    There will be a few examples in the remaining part of this chapter to
    ensure you know how to use them. Then, throughout the rest of the entire
    book, you will see many practical examples of how they are used in a
    range of situations.
    WHAT IS AN OBJECT MODEL?
    You have seen that an object can be used to create a model of something
    from the real world using data.
    An object model is a group of objects, each of which represent related
    things from the real world. Together they form a model of something
    larger.
    Two pages back, it was noted that an array can hold a set of objects, or
    that the property of an object could be an array. It is also possible for the
    property of an object to be another object. When an object is nested inside
    another object, you may hear it referred to as a child object.
    THREE GROUPS OF BUILT-IN
    THREE GROUPS OF BUILT-IN
OBJECTS

USING BUILT-IN OBJECTS:

    The three sets of built-in objects each offer a different range of tools
    that help you write scripts for web pages.
    Chapter 5 is dedicated to the Document Object Model because it is
    needed to access and update the contents of a web page.
    The other two sets of objects will be introduced in this chapter, and
    then you will see them used throughout the rest of the book.
    This book will teach you how to use these built-in objects and what
    type of information you can get from each one. You will also see
    examples that use many of their most popular features.
    We do not have space to exhaustively document every object in each
    of these models in this book, so you can find a list of links to online

    resources at:
    http://javascriptbook.com/resources
    BROWSER OBJECT MODEL

    The Browser Object Model creates a model of the browser tab or
    window.

    The topmost object is the window object, which represents current
    browser window or tab. Its child objects represent other browser
    features.
    EXAMPLES

    The window object's print() method will cause the browser's print
    dialog box to be shown:
    window.print();

    The screen object's width property will let you find the width of the
    device's screen in pixels:
    window.screen.width;

    You meet the window object on p124 along with some properties of the
    screen and history objects.
    DOCUMENT OBJECT MODEL

    The Document Object Model (DOM) creates a model of the current
    web page.

    The topmost object is the document object, which represents the page
    as a whole. Its child objects represent other items on the page.

    EXAMPLES
    The document object's getElementById() method gets an element by
    the value of its id attribute:

    document.getElementById(‘one’);
    The document object's lastModified property will tell you the date
    that the page was last updated:

    document.lastModified;

    You meet the document object on p126. Chapter 5 goes into this object
    model in depth.

    GLOBAL JAVASCRIPT OBJECTS

    The global objects do not form a single model. They are a group of
    individual objects that relate to different parts of the JavaScript
    language.

    The names of the global objects usually start with a capital letter, e.g.,
    the String and Date objects.
    These objects represent basic data types:
    These objects help deal with real-world concepts:

    EXAMPLES
    The String object's toUpperCase() method makes all letters in the
    following variable uppercase:

    hotel.toUpperCase();

    The Math object's PI property will return the value of pi:

    Math.PI();

    You meet the String, Number, Date, and Math objects later in this
    chapter.

    THE BROWSER OBJECT

MODEL: THE WINDOW OBJECT
    The window object represents the current browser
    window or tab. It is the topmost object in the
    Browser Object Model, and it contains other objects
    that tell you about the browser.
    Here are a selection of the window object's properties and methods. You
    can also see some properties of the screen and history objects (which
    are children of the window object).
PROPERTY DESCRIPTION

    window.innerHeight

    Height of window (excluding browser chrome/user
    interface) (in pixels)
    window.innerWidth

    Width of window (excluding browser chrome/user
    interface) (in pixels)

    window.pageXOffs

    Distance document has been scrolled horizontally (in
    pixels)et
    window.pageYOffset

    Distance document has been scrolled vertically (in pixels)

    window.screenX

    X-coordinate of pointer, relative to top left corner of screen
    (in pixels)

    window.screenY

    Y-coordinate of pointer, relative to top left corner of screen
    (in pixels)

    window.location

    Current URL of window object (or local file path)
    
    window.document

    Reference to document object, which is used to represent
    the current page contained in window

    window.history

    Reference to history object for browser window or tab,
    which contains details of the pages that have been viewed
    in that window or tab

    window.history.length

    Number of items in history object for browser window or
    tab

    window.screen

    Reference to screen object

    window.screen.width

    Accesses screen object and finds value of its width
    property (in pixels)

    window.screen.height

    Accesses screen object and finds value of its height
    property (in pixels)
    METHOD
    DESCRIPTION

    window.alert()

    Creates dialog box with message (user must click OK button
    to close it)

    window.open()

    Opens new browser window with URL specified as parameter
    (if browser has pop-up blocking software installed, this
    method may not work)

    window.print()

    Tells browser that user wants to print contents of current page
    (acts like user has clicked a print option in the browser's user
    interface)nt() interface)

USING THE BROWSER OBJECT MODEL

    Here, data about the browser is collected from the window object and
    its children, stored in the msg variable, and shown in the page. The +=
    operator adds data onto the end of the msg variable.

    1. Two of the window object's properties, innerWidth and
    innerHeight, show width and height of the browser window.

    2. Child objects are stored as properties of their parent object. So dot
    notation is used to access them, just like you would access any other
    property of that object.
    In turn, to access the properties of the child object, another dot is used
    between the child object's name and its properties, e.g.,
    window.history.length

    3. The element whose id attribute has a value of info is selected, and
    the message that has been built up to this point is written into the page.
    See p228 for notes on using innerHTML because it can be a security
    risk if it is not used correctly.