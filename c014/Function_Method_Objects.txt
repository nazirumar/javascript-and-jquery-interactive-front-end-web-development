
    FUNCTIONS, METHODS & OBJECTS
        Browsers require very detailed instructions about what we want them to do. 
        Therefore, complex scripts can run to hundreds (even thousands) of lines.
        Programmers use functions, methods,and objects to organize their code. This
        chapter is divided into three sections that  introduce:

    FUNCTIONS & METHODS
            Functions consist of a series of statements that have been
            grouped together because they perform a specific task. A
            method is the same as a function, except methods are
            created inside (and are part of) an object.
            OBJECTS
            In Chapter 1 you saw that programmers use objects to
            create models of the world using data, and that objects are
            made up of properties and methods. In this section, you
            learn how to create your own objects using JavaScript.
            BUILT-IN OBJECTS
            The browser comes with a set of objects that act like a
            toolkit for creating interactive web pages. This section
            introduces you to a number of built-in objects, which you
            will then see used throughout the rest of the book.
    WHAT IS A FUNCTION?
            Functions let you group a series of statements
            together to perform a specific task. If different parts
            of a script repeat the same task, you can reuse the
            function (rather than repeating the same set of
            statements).
            Grouping together the statements that are required to answer a question or
            perform a task helps organize your code.
            Furthermore, the statements in a function are not always executed when a
            page loads, so functions also offer a way to store the steps needed to
            achieve a task. The script can then ask the function to perform all of those
            steps as and when they are required. For example, you might have a task
            that you only want to perform if the user clicks on a specific element in
            the page.
            If you are going to ask the function to perform its task later, you need to
            give your function a name. That name should describe the task it is
            performing. When you ask it to perform its task, it is known as calling the
            function.
            The steps that the function needs to perform in order to perform its task
            are packaged up in a code block. You may remember from the last
            chapter that a code block consists of one or more statements contained
            within curly braces. (And you do not write a semicolon after the closing
            curly brace - like you do after a statement.)
            Some functions need to be provided with information in order to achieve
            a given task. For example, a function to calculate the area of a box would
            need to know its width and height. Pieces of information passed to a
            function are known as parameters.
            When you write a function and you expect it to provide you with an
            answer, the response is known as a return value.
            On the right, there is an example of a function in the JavaScript file. It is
            called updateMessage().
            Don't worry if you do not understand the syntax of the example on the
            right; you will take a closer look at how to write and use functions in the
            pages that follow.
            Remember that programming languages often rely upon on name/value
            pairs. The function has a name, updateMessage, and the value is the code
            block (which consists of statements). When you call the function by its
            name, those statements will run.
            You can also have anonymous functions. They do not have a name, so
            they cannot be called. Instead, they are executed as soon as the interpreter
            comes across them. For they cannot be called. Instead, they are executed as soon as the interpreter comes across them.





            1. The function can store the instructions for a specific task.
            2. When you need the script to perform that task, you call the function.
            3. The function executes the code in that code block.
            4. When it has finished, the code continues to run from the point where
            it was initially called.